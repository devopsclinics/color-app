name: test ,build and deploy
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  schedule:
    - cron: '44 6 * * 2'

# jobs:
#   analyze:
#     name: Analyze
#     runs-on: ${{ (matrix.language == 'swift' && 'macos-latest') || 'ubuntu-latest' }}
#     timeout-minutes: ${{ (matrix.language == 'swift' && 120) || 360 }}
#     permissions:
#       actions: read
#       contents: read
#       security-events: write

#     strategy:
#       fail-fast: false
#       matrix:
#         language: [ 'python' ]
#         # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python', 'ruby', 'swift' ]

#     steps:
#     - name: Checkout repository
#       uses: actions/checkout@v3

#     - name: Initialize CodeQL
#       uses: github/codeql-action/init@v2
#       with:
#         languages: ${{ matrix.language }}

#     - name: Autobuild
#       uses: github/codeql-action/autobuild@v2

#     # If the Autobuild step above fails, you might want to uncomment the lines below to manually build your project.
#     # - run: |
#     #     echo "Run, Build Application using script"
#     #     ./location_of_script_within_repo/buildscript.sh

#     - name: Perform CodeQL Analysis
#       uses: github/codeql-action/analyze@v2
#       with:
#         category: "/language:${{matrix.language}}"

  docker:
    # needs: analyze
    runs-on: ubuntu-latest
    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/color-app:${{ github.sha }}

#   deploy:
#     name: Deploy to Kubernetes
#     runs-on: ubuntu-latest
#     needs: docker

#     steps:
#     - name: Checkout code
#       uses: actions/checkout@v3

#     - name: Set up kubectl
#       uses: azure/setup-kubectl@v3
#       with:
#         version: 'latest'

#     # - name: Set up Kubeconfig
#     #   run: |
#     #     echo "${{ secrets.KUBE_CONFIG }}" | base64 --decode > $HOME/.kube/config

#     - name: Set up Kubeconfig
#       run: |
#         mkdir -p $HOME/.kube
#         echo "${{ secrets.KUBE_CONFIG }}" | base64 --decode > $HOME/.kube/config

#     # - name: Deploy to Kubernetes
#     #   run: |
#     #     kubectl set image deployment/color-app color-app=${{ secrets.DOCKER_USERNAME }}/color-app:${{ github.sha }}
    
#     - name: Update and Apply YAML Files
#       run: |
#         for file in *.yaml; do
#           if [[ "$file" != "cloudbuild.yaml" ]]; then
#             sed -i 's|image:.*|image: ${{ secrets.DOCKERHUB_USERNAME }}/color-app:${{ github.sha }}|g' "$file"
#             kubectl apply -f "$file"
#           fi
#         done
     
