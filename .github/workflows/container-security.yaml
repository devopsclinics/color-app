name: Container Security Workflow

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  # Step 1: Dockerfile Linting with Hadolint
  hadolint:
    name: Run Hadolint Scanning
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      actions: read

    steps:
      # Checkout the code from the repository
      - name: Checkout code
        uses: actions/checkout@v4

      # Run Hadolint on Dockerfile
      - name: Run Hadolint
        uses: hadolint/hadolint-action@f988afea3da57ee48710a9795b6bb677cc901183
        with:
          dockerfile: ./Dockerfile
          format: sarif
          output-file: hadolint-results.sarif
          no-fail: true  # Continue even if issues are found

      # Upload SARIF report to GitHub for security insights
      - name: Upload analysis results to GitHub
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: hadolint-results.sarif
          wait-for-processing: true

      # Save Hadolint SARIF report as an artifact
      - name: Upload Hadolint SARIF Report as Artifact
        uses: actions/upload-artifact@v3
        with:
          name: hadolint-report
          path: hadolint-results.sarif

  # Step 2: Build and Push Docker Image
  docker:
    name: Build and Push Docker Image
    needs: hadolint
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Log in to Docker Hub for image push
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Build and push the Docker image to Docker Hub
      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/color-app:${{ github.sha }}

  # Step 3: Vulnerability Scanning with Trivy
  scan-docker-image:
    name: Scan Docker Image for Vulnerabilities
    runs-on: ubuntu-latest
    needs: docker

    steps:
      # Run Trivy to scan Docker image for vulnerabilities
      - name: Scan Docker Image for Vulnerabilities
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ secrets.DOCKERHUB_USERNAME }}/color-app:${{ github.sha }}
          format: table
          output: table.html


      # Save Trivy results as an artifact
      - name: Upload Trivy Report as Artifact
        uses: actions/upload-artifact@v3
        with:
          name: trivy-report
          path: table.html
