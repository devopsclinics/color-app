# name: test, build and deploy

# on:
#   push:
#     branches: [ "main" ]
#   pull_request:
#     branches: [ "main" ]
#   schedule:
#     - cron: '44 6 * * 2'

# jobs:
#   analyze:
#     name: Analyze
#     runs-on: ${{ (matrix.language == 'swift' && 'macos-latest') || 'ubuntu-latest' }}
#     timeout-minutes: ${{ (matrix.language == 'swift' && 120) || 360 }}
#     permissions:
#       actions: read
#       contents: read
#       security-events: write

#     strategy:
#       fail-fast: false
#       matrix:
#         language: [ 'python' ]
#         # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python', 'ruby', 'swift' ]

#     steps:
#     - name: Checkout repository
#       uses: actions/checkout@v3

#     - name: Initialize CodeQL
#       uses: github/codeql-action/init@v2
#       with:
#         languages: ${{ matrix.language }}

#     - name: Autobuild
#       uses: github/codeql-action/autobuild@v2

#     # If the Autobuild step above fails, you might want to uncomment the lines below to manually build your project.
#     # - run: |
#     #     echo "Run, Build Application using script"
#     #     ./location_of_script_within_repo/buildscript.sh

#     - name: Perform CodeQL Analysis
#       uses: github/codeql-action/analyze@v2
#       with:
#         category: "/language:${{matrix.language}}"

#   unit-tests:
#     name: Run Unit Tests
#     runs-on: ubuntu-latest
#     # needs: analyze

#     steps:
#     - name: Checkout code
#       uses: actions/checkout@v3

#     - name: Set up Python
#       uses: actions/setup-python@v4
#       with:
#         python-version: '3.x'

#     - name: Install dependencies
#       run: |
#         python -m pip install --upgrade pip
#         pip install -r requirements.txt

#     - name: Run Unit Tests
#       run: |
#         pip install pytest
#         pytest

#   lint-dockerfile:
#     name: Lint Dockerfile
#     runs-on: ubuntu-latest
#     # needs: unit-tests

#     steps:
#     - name: Checkout code
#       uses: actions/checkout@v3

#     - name: Lint Dockerfile
#       uses: hadolint/hadolint-action@v2
#       with:
#         dockerfile: ./Dockerfile

#   docker:
#     # needs: lint-dockerfile
#     runs-on: ubuntu-latest
#     steps:
#       - name: Set up QEMU
#         uses: docker/setup-qemu-action@v2

#       - name: Set up Docker Buildx
#         uses: docker/setup-buildx-action@v2

#       - name: Login to Docker Hub
#         uses: docker/login-action@v2
#         with:
#           username: ${{ secrets.DOCKERHUB_USERNAME }}
#           password: ${{ secrets.DOCKERHUB_TOKEN }}

#       - name: Build and push
#         uses: docker/build-push-action@v4
#         with:
#           push: true
#           tags: ${{ secrets.DOCKERHUB_USERNAME }}/color-app:${{ github.sha }}

#   scan-docker-image:
#     name: Scan Docker Image for Vulnerabilities
#     runs-on: ubuntu-latest
#     needs: docker

#     steps:
#     - name: Scan Docker Image for Vulnerabilities
#       uses: aquasecurity/trivy-action@master
#       with:
#         image-ref: ${{ secrets.DOCKERHUB_USERNAME }}/color-app:${{ github.sha }}

#   deploy:
#     name: Deploy to Kubernetes
#     runs-on: ubuntu-latest
#     needs: scan-docker-image

#     steps:
#     - name: Checkout code
#       uses: actions/checkout@v3

#     - name: Set up kubectl
#       uses: azure/setup-kubectl@v3
#       with:
#         version: 'latest'

#     - name: Set up Kubeconfig
#       run: |
#         mkdir -p $HOME/.kube
#         echo "${{ secrets.KUBE_CONFIG }}" | base64 --decode > $HOME/.kube/config

#     - name: Update and Apply YAML Files
#       run: |
#         for file in *.yaml; do
#           if [[ "$file" != "cloudbuild.yaml" ]]; then
#             sed -i 's|image:.*|image: ${{ secrets.DOCKERHUB_USERNAME }}/color-app:${{ github.sha }}|g' "$file"
#             kubectl apply -f "$file"
#           fi
#         done

#   check-deployment-status:
#     name: Check Deployment Status
#     runs-on: ubuntu-latest
#     needs: deploy

#     steps:
#     - name: Check Deployment Status
#       run: |
#         kubectl rollout status deployment/color-app


name: test, build and deploy

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  schedule:
    - cron: '44 6 * * 2'

jobs:
  analyze:
    name: Analyze
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: python

    - name: Autobuild
      uses: github/codeql-action/autobuild@v2

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2
      with:
        category: "/language:python"

  unit-tests:
    name: Run Unit Tests
    runs-on: ubuntu-latest
    # needs: analyze

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run Unit Tests
      run: |
        # Add your tests here. Example placeholder test:
        echo "Running placeholder tests"
        python -m unittest discover -s tests

  lint-dockerfile:
    name: Lint Dockerfile
    runs-on: ubuntu-latest
    needs: unit-tests

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Lint Dockerfile
      uses: hadolint/hadolint-action@v2
      with:
        dockerfile: ./Dockerfile

  docker:
    needs: lint-dockerfile
    runs-on: ubuntu-latest
    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/color-app:${{ github.sha }}

  scan-docker-image:
    name: Scan Docker Image for Vulnerabilities
    runs-on: ubuntu-latest
    needs: docker

    steps:
    - name: Scan Docker Image for Vulnerabilities
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ secrets.DOCKERHUB_USERNAME }}/color-app:${{ github.sha }}

  deploy:
    name: Deploy to Kubernetes
    runs-on: ubuntu-latest
    needs: scan-docker-image

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'

    - name: Set up Kubeconfig
      run: |
        mkdir -p $HOME/.kube
        echo "${{ secrets.KUBE_CONFIG }}" | base64 --decode > $HOME/.kube/config

    - name: Update and Apply YAML Files
      run: |
        for file in *.yaml; do
          if [[ "$file" != "cloudbuild.yaml" ]]; then
            sed -i 's|image:.*|image: ${{ secrets.DOCKERHUB_USERNAME }}/color-app:${{ github.sha }}|g' "$file"
            kubectl apply -f "$file"
          fi
        done

  check-deployment-status:
    name: Check Deployment Status
    runs-on: ubuntu-latest
    needs: deploy

    steps:
    - name: Check Deployment Status
      run: |
        kubectl rollout status deployment/color-app
