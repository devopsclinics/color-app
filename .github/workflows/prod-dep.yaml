name: test, scan, build and deploy

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  schedule:
    - cron: '44 6 * * 2'

jobs:
  analyze:
    name: Analyze
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: python

    - name: Autobuild
      uses: github/codeql-action/autobuild@v2

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2
      with:
        category: "/language:python"

  unit-tests:
    name: Run Unit Tests
    runs-on: ubuntu-latest
    needs: analyze

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run Unit Tests
      run: |
        python -m unittest discover -s tests

  hadolint:
    name: Run hadolint scanning
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      actions: read

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run hadolint
      uses: hadolint/hadolint-action@f988afea3da57ee48710a9795b6bb677cc901183
      with:
        dockerfile: ./Dockerfile
        format: sarif
        output-file: hadolint-results.sarif
        no-fail: true

    - name: Upload analysis results to GitHub
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: hadolint-results.sarif
        wait-for-processing: true

  docker:
    name: Build and Push Docker Image
    needs: [unit-tests, hadolint]
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build and push
      uses: docker/build-push-action@v4
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ secrets.DOCKERHUB_USERNAME }}/color-app:${{ github.sha }}

  scan-docker-image:
    name: Scan Docker Image for Vulnerabilities
    runs-on: ubuntu-latest
    needs: docker

    steps:
    - name: Scan Docker Image for Vulnerabilities
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ secrets.DOCKERHUB_USERNAME }}/color-app:${{ github.sha }}

  deploy:
    name: Deploy to Kubernetes
    runs-on: ubuntu-latest
    needs: scan-docker-image

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'

    - name: Set up Kubeconfig
      run: |
        mkdir -p $HOME/.kube
        echo "${{ secrets.KUBE_CONFIG }}" | base64 --decode > $HOME/.kube/config

    - name: Update and Apply YAML Files
      run: |
        for file in *.yaml; do
          if [[ "$file" != "cloudbuild.yaml" ]]; then
            sed -i 's|image:.*|image: ${{ secrets.DOCKERHUB_USERNAME }}/color-app:${{ github.sha }}|g' "$file"
            kubectl apply -f "$file"
          fi
        done

  check-deployment-status:
    name: Check Deployment Status
    runs-on: ubuntu-latest
    needs: deploy

    steps:
    - name: Check Deployment Status
      run: |
        kubectl rollout status deployment/color-app
